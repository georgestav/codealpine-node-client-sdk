/**
 * codealpine api
 * The codealpine API description
 *
 * OpenAPI spec version: 1.0.1
 * 
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as api from "./api"
import { Configuration } from "./configuration"

const config: Configuration = {}

describe("ClimbingQuestionnaireApi", () => {
  let instance: api.ClimbingQuestionnaireApi
  beforeEach(function() {
    instance = new api.ClimbingQuestionnaireApi(config)
  });

  test("climbingQuestionnaireControllerFindAll", () => {
    const withQuestions: string = "withQuestions_example"
    return expect(instance.climbingQuestionnaireControllerFindAll(withQuestions, {})).resolves.toBe(null)
  })
  test("climbingQuestionnaireControllerFindForUser", () => {
    const authorization: string = "authorization_example"
    return expect(instance.climbingQuestionnaireControllerFindForUser(authorization, {})).resolves.toBe(null)
  })
  test("climbingQuestionnaireControllerFindOne", () => {
    const id: string = "id_example"
    const withQuestions: string = "withQuestions_example"
    return expect(instance.climbingQuestionnaireControllerFindOne(id, withQuestions, {})).resolves.toBe(null)
  })
  test("climbingQuestionnaireControllerGetAnalysisMessage", () => {
    const questionnaire: number = 1.2
    return expect(instance.climbingQuestionnaireControllerGetAnalysisMessage(questionnaire, {})).resolves.toBe(null)
  })
  test("climbingQuestionnaireControllerSaveUserQuestionnaire", () => {
    const authorization: string = "authorization_example"
    return expect(instance.climbingQuestionnaireControllerSaveUserQuestionnaire(authorization, {})).resolves.toBe(null)
  })
})

describe("ClimbingStatsApi", () => {
  let instance: api.ClimbingStatsApi
  beforeEach(function() {
    instance = new api.ClimbingStatsApi(config)
  });

  test("climbingStatsControllerGetUserProfile", () => {
    const authorization: string = "authorization_example"
    return expect(instance.climbingStatsControllerGetUserProfile(authorization, {})).resolves.toBe(null)
  })
  test("climbingStatsControllerGetUserStats", () => {
    const authorization: string = "authorization_example"
    return expect(instance.climbingStatsControllerGetUserStats(authorization, {})).resolves.toBe(null)
  })
})

describe("DefaultApi", () => {
  let instance: api.DefaultApi
  beforeEach(function() {
    instance = new api.DefaultApi(config)
  });

  test("appControllerGetInfo", () => {
    return expect(instance.appControllerGetInfo({})).resolves.toBe(null)
  })
})

describe("NavigationLinksApi", () => {
  let instance: api.NavigationLinksApi
  beforeEach(function() {
    instance = new api.NavigationLinksApi(config)
  });

  test("navlinksControllerV1Create", () => {
    const body: api.CreateNavlinkDto = undefined
    return expect(instance.navlinksControllerV1Create(body, {})).resolves.toBe(null)
  })
  test("navlinksControllerV1FindAll", () => {
    return expect(instance.navlinksControllerV1FindAll({})).resolves.toBe(null)
  })
  test("navlinksControllerV1FindOne", () => {
    const id: string = "id_example"
    return expect(instance.navlinksControllerV1FindOne(id, {})).resolves.toBe(null)
  })
  test("navlinksControllerV1Remove", () => {
    const id: string = "id_example"
    return expect(instance.navlinksControllerV1Remove(id, {})).resolves.toBe(null)
  })
  test("navlinksControllerV1Update", () => {
    const body: api.UpdateNavlinkDto = undefined
    const id: string = "id_example"
    return expect(instance.navlinksControllerV1Update(body, id, {})).resolves.toBe(null)
  })
})

describe("NotificationsApi", () => {
  let instance: api.NotificationsApi
  beforeEach(function() {
    instance = new api.NotificationsApi(config)
  });

  test("notificationControllerCreate", () => {
    const body: api.CreateNotificationDto = undefined
    return expect(instance.notificationControllerCreate(body, {})).resolves.toBe(null)
  })
  test("notificationControllerFindAll", () => {
    return expect(instance.notificationControllerFindAll({})).resolves.toBe(null)
  })
  test("notificationControllerFindOne", () => {
    const id: string = "id_example"
    return expect(instance.notificationControllerFindOne(id, {})).resolves.toBe(null)
  })
  test("notificationControllerRemove", () => {
    const id: string = "id_example"
    return expect(instance.notificationControllerRemove(id, {})).resolves.toBe(null)
  })
  test("notificationControllerUpdate", () => {
    const body: api.UpdateNotificationDto = undefined
    const id: string = "id_example"
    return expect(instance.notificationControllerUpdate(body, id, {})).resolves.toBe(null)
  })
})

describe("UsersApi", () => {
  let instance: api.UsersApi
  beforeEach(function() {
    instance = new api.UsersApi(config)
  });

  test("userControllerUpdate", () => {
    const body: api.UpdateUserDto = undefined
    const id: string = "id_example"
    return expect(instance.userControllerUpdate(body, id, {})).resolves.toBe(null)
  })
})

