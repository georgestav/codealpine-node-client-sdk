/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * codealpine api
 * The codealpine API description
 *
 * OpenAPI spec version: 1.0.1
 * 
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as url from "url";
import * as isomorphicFetch from "isomorphic-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "http://localhost:3045".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = isomorphicFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface ClimbingProvidedAnswers
 */
export interface ClimbingProvidedAnswers {
    /**
     * 
     * @type {number}
     * @memberof ClimbingProvidedAnswers
     */
    id: number;
    /**
     * 
     * @type {number}
     * @memberof ClimbingProvidedAnswers
     */
    value: number;
    /**
     * 
     * @type {string}
     * @memberof ClimbingProvidedAnswers
     */
    answer: string;
    /**
     * 
     * @type {ClimbingQuestion}
     * @memberof ClimbingProvidedAnswers
     */
    question: ClimbingQuestion;
}
/**
 * 
 * @export
 * @interface ClimbingQuestion
 */
export interface ClimbingQuestion {
    /**
     * 
     * @type {number}
     * @memberof ClimbingQuestion
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof ClimbingQuestion
     */
    slug: string;
    /**
     * 
     * @type {string}
     * @memberof ClimbingQuestion
     */
    question: string;
    /**
     * 
     * @type {ClimbingQuestionnaire}
     * @memberof ClimbingQuestion
     */
    questionnaire: ClimbingQuestionnaire;
    /**
     * 
     * @type {ClimbingProvidedAnswers}
     * @memberof ClimbingQuestion
     */
    answers: ClimbingProvidedAnswers;
}
/**
 * 
 * @export
 * @interface ClimbingQuestionnaire
 */
export interface ClimbingQuestionnaire {
    /**
     * 
     * @type {number}
     * @memberof ClimbingQuestionnaire
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof ClimbingQuestionnaire
     */
    slug: string;
    /**
     * 
     * @type {string}
     * @memberof ClimbingQuestionnaire
     */
    title: string;
    /**
     * 
     * @type {string}
     * @memberof ClimbingQuestionnaire
     */
    description: string;
    /**
     * 
     * @type {string}
     * @memberof ClimbingQuestionnaire
     */
    accessRequired: string;
    /**
     * 
     * @type {ClimbingQuestion}
     * @memberof ClimbingQuestionnaire
     */
    climbingQuestion: ClimbingQuestion;
    /**
     * 
     * @type {ClimbingQuestionnaireAnalysis}
     * @memberof ClimbingQuestionnaire
     */
    analysis: ClimbingQuestionnaireAnalysis;
    /**
     * 
     * @type {ClimbingQuestionnaireUser}
     * @memberof ClimbingQuestionnaire
     */
    userResponses: ClimbingQuestionnaireUser;
}
/**
 * 
 * @export
 * @interface ClimbingQuestionnaireAnalysis
 */
export interface ClimbingQuestionnaireAnalysis {
    /**
     * 
     * @type {number}
     * @memberof ClimbingQuestionnaireAnalysis
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof ClimbingQuestionnaireAnalysis
     */
    message: string;
    /**
     * 
     * @type {number}
     * @memberof ClimbingQuestionnaireAnalysis
     */
    minValue: number;
    /**
     * 
     * @type {number}
     * @memberof ClimbingQuestionnaireAnalysis
     */
    maxValue: number;
    /**
     * 
     * @type {ClimbingQuestionnaire}
     * @memberof ClimbingQuestionnaireAnalysis
     */
    questionnaire: ClimbingQuestionnaire;
    /**
     * 
     * @type {ClimbingQuestionnaireUser}
     * @memberof ClimbingQuestionnaireAnalysis
     */
    userResponse: ClimbingQuestionnaireUser;
}
/**
 * 
 * @export
 * @interface ClimbingQuestionnaireUser
 */
export interface ClimbingQuestionnaireUser {
    /**
     * 
     * @type {number}
     * @memberof ClimbingQuestionnaireUser
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof ClimbingQuestionnaireUser
     */
    userId: string;
    /**
     * 
     * @type {number}
     * @memberof ClimbingQuestionnaireUser
     */
    result: number;
    /**
     * 
     * @type {ClimbingQuestionnaireAnalysis}
     * @memberof ClimbingQuestionnaireUser
     */
    analysis: ClimbingQuestionnaireAnalysis;
    /**
     * 
     * @type {UserResponses}
     * @memberof ClimbingQuestionnaireUser
     */
    answers: UserResponses;
    /**
     * 
     * @type {ClimbingQuestionnaire}
     * @memberof ClimbingQuestionnaireUser
     */
    questionnaires: ClimbingQuestionnaire;
    /**
     * 
     * @type {Date}
     * @memberof ClimbingQuestionnaireUser
     */
    createdAt: Date;
}
/**
 * 
 * @export
 * @interface CreateNavlinkDto
 */
export interface CreateNavlinkDto {
    /**
     * 
     * @type {string}
     * @memberof CreateNavlinkDto
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof CreateNavlinkDto
     */
    href: string;
    /**
     * 
     * @type {boolean}
     * @memberof CreateNavlinkDto
     */
    isActive: boolean;
}
/**
 * 
 * @export
 * @interface CreateNotificationDto
 */
export interface CreateNotificationDto {
    /**
     * 
     * @type {number}
     * @memberof CreateNotificationDto
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof CreateNotificationDto
     */
    title: string;
    /**
     * 
     * @type {string}
     * @memberof CreateNotificationDto
     */
    message: string;
    /**
     * 
     * @type {number}
     * @memberof CreateNotificationDto
     */
    level: number;
    /**
     * 
     * @type {number}
     * @memberof CreateNotificationDto
     */
    created: number;
}
/**
 * 
 * @export
 * @interface Notification
 */
export interface Notification {
    /**
     * 
     * @type {number}
     * @memberof Notification
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof Notification
     */
    title: string;
    /**
     * 
     * @type {string}
     * @memberof Notification
     */
    message: string;
    /**
     * 
     * @type {number}
     * @memberof Notification
     */
    level: number;
    /**
     * 
     * @type {number}
     * @memberof Notification
     */
    created?: number;
}
/**
 * 
 * @export
 * @interface UpdateNavlinkDto
 */
export interface UpdateNavlinkDto {
    /**
     * 
     * @type {string}
     * @memberof UpdateNavlinkDto
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateNavlinkDto
     */
    href: string;
    /**
     * 
     * @type {boolean}
     * @memberof UpdateNavlinkDto
     */
    isActive: boolean;
}
/**
 * 
 * @export
 * @interface UpdateNotificationDto
 */
export interface UpdateNotificationDto {
    /**
     * 
     * @type {number}
     * @memberof UpdateNotificationDto
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof UpdateNotificationDto
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateNotificationDto
     */
    message?: string;
    /**
     * 
     * @type {number}
     * @memberof UpdateNotificationDto
     */
    level?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdateNotificationDto
     */
    created?: number;
}
/**
 * 
 * @export
 * @interface UpdateUserDto
 */
export interface UpdateUserDto {
}
/**
 * 
 * @export
 * @interface UserResponses
 */
export interface UserResponses {
}
/**
 * ClimbingQuestionnaireApi - fetch parameter creator
 * @export
 */
export const ClimbingQuestionnaireApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} withQuestions 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        climbingQuestionnaireControllerFindAll(withQuestions: string, options: any = {}): FetchArgs {
            // verify required parameter 'withQuestions' is not null or undefined
            if (withQuestions === null || withQuestions === undefined) {
                throw new RequiredError('withQuestions','Required parameter withQuestions was null or undefined when calling climbingQuestionnaireControllerFindAll.');
            }
            const localVarPath = `/api/v1/climbing-questionnaire/all/{withQuestions}`
                .replace(`{${"withQuestions"}}`, encodeURIComponent(String(withQuestions)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        climbingQuestionnaireControllerFindForUser(authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling climbingQuestionnaireControllerFindForUser.');
            }
            const localVarPath = `/api/v1/climbing-questionnaire/user`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {string} withQuestions 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        climbingQuestionnaireControllerFindOne(id: string, withQuestions: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling climbingQuestionnaireControllerFindOne.');
            }
            // verify required parameter 'withQuestions' is not null or undefined
            if (withQuestions === null || withQuestions === undefined) {
                throw new RequiredError('withQuestions','Required parameter withQuestions was null or undefined when calling climbingQuestionnaireControllerFindOne.');
            }
            const localVarPath = `/api/v1/climbing-questionnaire/{id}/{withQuestions}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"withQuestions"}}`, encodeURIComponent(String(withQuestions)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} questionnaire 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        climbingQuestionnaireControllerGetAnalysisMessage(questionnaire: number, options: any = {}): FetchArgs {
            // verify required parameter 'questionnaire' is not null or undefined
            if (questionnaire === null || questionnaire === undefined) {
                throw new RequiredError('questionnaire','Required parameter questionnaire was null or undefined when calling climbingQuestionnaireControllerGetAnalysisMessage.');
            }
            const localVarPath = `/api/v1/climbing-questionnaire/analysis/{questionnaire}`
                .replace(`{${"questionnaire"}}`, encodeURIComponent(String(questionnaire)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        climbingQuestionnaireControllerSaveUserQuestionnaire(authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling climbingQuestionnaireControllerSaveUserQuestionnaire.');
            }
            const localVarPath = `/api/v1/climbing-questionnaire/save-answers`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ClimbingQuestionnaireApi - functional programming interface
 * @export
 */
export const ClimbingQuestionnaireApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} withQuestions 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        climbingQuestionnaireControllerFindAll(withQuestions: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<ClimbingQuestionnaire>> {
            const localVarFetchArgs = ClimbingQuestionnaireApiFetchParamCreator(configuration).climbingQuestionnaireControllerFindAll(withQuestions, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        climbingQuestionnaireControllerFindForUser(authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<ClimbingQuestionnaire>> {
            const localVarFetchArgs = ClimbingQuestionnaireApiFetchParamCreator(configuration).climbingQuestionnaireControllerFindForUser(authorization, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {string} withQuestions 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        climbingQuestionnaireControllerFindOne(id: string, withQuestions: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ClimbingQuestionnaire> {
            const localVarFetchArgs = ClimbingQuestionnaireApiFetchParamCreator(configuration).climbingQuestionnaireControllerFindOne(id, withQuestions, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {number} questionnaire 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        climbingQuestionnaireControllerGetAnalysisMessage(questionnaire: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ClimbingQuestionnaireApiFetchParamCreator(configuration).climbingQuestionnaireControllerGetAnalysisMessage(questionnaire, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        climbingQuestionnaireControllerSaveUserQuestionnaire(authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ClimbingQuestionnaireApiFetchParamCreator(configuration).climbingQuestionnaireControllerSaveUserQuestionnaire(authorization, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * ClimbingQuestionnaireApi - factory interface
 * @export
 */
export const ClimbingQuestionnaireApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {string} withQuestions 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        climbingQuestionnaireControllerFindAll(withQuestions: string, options?: any) {
            return ClimbingQuestionnaireApiFp(configuration).climbingQuestionnaireControllerFindAll(withQuestions, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        climbingQuestionnaireControllerFindForUser(authorization: string, options?: any) {
            return ClimbingQuestionnaireApiFp(configuration).climbingQuestionnaireControllerFindForUser(authorization, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {string} withQuestions 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        climbingQuestionnaireControllerFindOne(id: string, withQuestions: string, options?: any) {
            return ClimbingQuestionnaireApiFp(configuration).climbingQuestionnaireControllerFindOne(id, withQuestions, options)(fetch, basePath);
        },
        /**
         * 
         * @param {number} questionnaire 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        climbingQuestionnaireControllerGetAnalysisMessage(questionnaire: number, options?: any) {
            return ClimbingQuestionnaireApiFp(configuration).climbingQuestionnaireControllerGetAnalysisMessage(questionnaire, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        climbingQuestionnaireControllerSaveUserQuestionnaire(authorization: string, options?: any) {
            return ClimbingQuestionnaireApiFp(configuration).climbingQuestionnaireControllerSaveUserQuestionnaire(authorization, options)(fetch, basePath);
        },
    };
};

/**
 * ClimbingQuestionnaireApi - object-oriented interface
 * @export
 * @class ClimbingQuestionnaireApi
 * @extends {BaseAPI}
 */
export class ClimbingQuestionnaireApi extends BaseAPI {
    /**
     * 
     * @param {string} withQuestions 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClimbingQuestionnaireApi
     */
    public climbingQuestionnaireControllerFindAll(withQuestions: string, options?: any) {
        return ClimbingQuestionnaireApiFp(this.configuration).climbingQuestionnaireControllerFindAll(withQuestions, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} authorization 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClimbingQuestionnaireApi
     */
    public climbingQuestionnaireControllerFindForUser(authorization: string, options?: any) {
        return ClimbingQuestionnaireApiFp(this.configuration).climbingQuestionnaireControllerFindForUser(authorization, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} id 
     * @param {string} withQuestions 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClimbingQuestionnaireApi
     */
    public climbingQuestionnaireControllerFindOne(id: string, withQuestions: string, options?: any) {
        return ClimbingQuestionnaireApiFp(this.configuration).climbingQuestionnaireControllerFindOne(id, withQuestions, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {number} questionnaire 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClimbingQuestionnaireApi
     */
    public climbingQuestionnaireControllerGetAnalysisMessage(questionnaire: number, options?: any) {
        return ClimbingQuestionnaireApiFp(this.configuration).climbingQuestionnaireControllerGetAnalysisMessage(questionnaire, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} authorization 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClimbingQuestionnaireApi
     */
    public climbingQuestionnaireControllerSaveUserQuestionnaire(authorization: string, options?: any) {
        return ClimbingQuestionnaireApiFp(this.configuration).climbingQuestionnaireControllerSaveUserQuestionnaire(authorization, options)(this.fetch, this.basePath);
    }

}
/**
 * ClimbingStatsApi - fetch parameter creator
 * @export
 */
export const ClimbingStatsApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        climbingStatsControllerGetUserProfile(authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling climbingStatsControllerGetUserProfile.');
            }
            const localVarPath = `/api/v1/climbing-stats/user/assessment`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        climbingStatsControllerGetUserStats(authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling climbingStatsControllerGetUserStats.');
            }
            const localVarPath = `/api/v1/climbing-stats/user`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ClimbingStatsApi - functional programming interface
 * @export
 */
export const ClimbingStatsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        climbingStatsControllerGetUserProfile(authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<any>> {
            const localVarFetchArgs = ClimbingStatsApiFetchParamCreator(configuration).climbingStatsControllerGetUserProfile(authorization, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        climbingStatsControllerGetUserStats(authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
            const localVarFetchArgs = ClimbingStatsApiFetchParamCreator(configuration).climbingStatsControllerGetUserStats(authorization, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * ClimbingStatsApi - factory interface
 * @export
 */
export const ClimbingStatsApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        climbingStatsControllerGetUserProfile(authorization: string, options?: any) {
            return ClimbingStatsApiFp(configuration).climbingStatsControllerGetUserProfile(authorization, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        climbingStatsControllerGetUserStats(authorization: string, options?: any) {
            return ClimbingStatsApiFp(configuration).climbingStatsControllerGetUserStats(authorization, options)(fetch, basePath);
        },
    };
};

/**
 * ClimbingStatsApi - object-oriented interface
 * @export
 * @class ClimbingStatsApi
 * @extends {BaseAPI}
 */
export class ClimbingStatsApi extends BaseAPI {
    /**
     * 
     * @param {string} authorization 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClimbingStatsApi
     */
    public climbingStatsControllerGetUserProfile(authorization: string, options?: any) {
        return ClimbingStatsApiFp(this.configuration).climbingStatsControllerGetUserProfile(authorization, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} authorization 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClimbingStatsApi
     */
    public climbingStatsControllerGetUserStats(authorization: string, options?: any) {
        return ClimbingStatsApiFp(this.configuration).climbingStatsControllerGetUserStats(authorization, options)(this.fetch, this.basePath);
    }

}
/**
 * DefaultApi - fetch parameter creator
 * @export
 */
export const DefaultApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appControllerGetInfo(options: any = {}): FetchArgs {
            const localVarPath = `/api`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appControllerGetInfo(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).appControllerGetInfo(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appControllerGetInfo(options?: any) {
            return DefaultApiFp(configuration).appControllerGetInfo(options)(fetch, basePath);
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public appControllerGetInfo(options?: any) {
        return DefaultApiFp(this.configuration).appControllerGetInfo(options)(this.fetch, this.basePath);
    }

}
/**
 * NavigationLinksApi - fetch parameter creator
 * @export
 */
export const NavigationLinksApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateNavlinkDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        navlinksControllerV1Create(body: CreateNavlinkDto, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling navlinksControllerV1Create.');
            }
            const localVarPath = `/api/v1/navlinks`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"CreateNavlinkDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        navlinksControllerV1FindAll(options: any = {}): FetchArgs {
            const localVarPath = `/api/v1/navlinks`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        navlinksControllerV1FindOne(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling navlinksControllerV1FindOne.');
            }
            const localVarPath = `/api/v1/navlinks/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        navlinksControllerV1Remove(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling navlinksControllerV1Remove.');
            }
            const localVarPath = `/api/v1/navlinks/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateNavlinkDto} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        navlinksControllerV1Update(body: UpdateNavlinkDto, id: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling navlinksControllerV1Update.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling navlinksControllerV1Update.');
            }
            const localVarPath = `/api/v1/navlinks/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PATCH' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UpdateNavlinkDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NavigationLinksApi - functional programming interface
 * @export
 */
export const NavigationLinksApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateNavlinkDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        navlinksControllerV1Create(body: CreateNavlinkDto, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = NavigationLinksApiFetchParamCreator(configuration).navlinksControllerV1Create(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        navlinksControllerV1FindAll(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = NavigationLinksApiFetchParamCreator(configuration).navlinksControllerV1FindAll(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        navlinksControllerV1FindOne(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = NavigationLinksApiFetchParamCreator(configuration).navlinksControllerV1FindOne(id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        navlinksControllerV1Remove(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = NavigationLinksApiFetchParamCreator(configuration).navlinksControllerV1Remove(id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {UpdateNavlinkDto} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        navlinksControllerV1Update(body: UpdateNavlinkDto, id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = NavigationLinksApiFetchParamCreator(configuration).navlinksControllerV1Update(body, id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * NavigationLinksApi - factory interface
 * @export
 */
export const NavigationLinksApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {CreateNavlinkDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        navlinksControllerV1Create(body: CreateNavlinkDto, options?: any) {
            return NavigationLinksApiFp(configuration).navlinksControllerV1Create(body, options)(fetch, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        navlinksControllerV1FindAll(options?: any) {
            return NavigationLinksApiFp(configuration).navlinksControllerV1FindAll(options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        navlinksControllerV1FindOne(id: string, options?: any) {
            return NavigationLinksApiFp(configuration).navlinksControllerV1FindOne(id, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        navlinksControllerV1Remove(id: string, options?: any) {
            return NavigationLinksApiFp(configuration).navlinksControllerV1Remove(id, options)(fetch, basePath);
        },
        /**
         * 
         * @param {UpdateNavlinkDto} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        navlinksControllerV1Update(body: UpdateNavlinkDto, id: string, options?: any) {
            return NavigationLinksApiFp(configuration).navlinksControllerV1Update(body, id, options)(fetch, basePath);
        },
    };
};

/**
 * NavigationLinksApi - object-oriented interface
 * @export
 * @class NavigationLinksApi
 * @extends {BaseAPI}
 */
export class NavigationLinksApi extends BaseAPI {
    /**
     * 
     * @param {CreateNavlinkDto} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NavigationLinksApi
     */
    public navlinksControllerV1Create(body: CreateNavlinkDto, options?: any) {
        return NavigationLinksApiFp(this.configuration).navlinksControllerV1Create(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NavigationLinksApi
     */
    public navlinksControllerV1FindAll(options?: any) {
        return NavigationLinksApiFp(this.configuration).navlinksControllerV1FindAll(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NavigationLinksApi
     */
    public navlinksControllerV1FindOne(id: string, options?: any) {
        return NavigationLinksApiFp(this.configuration).navlinksControllerV1FindOne(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NavigationLinksApi
     */
    public navlinksControllerV1Remove(id: string, options?: any) {
        return NavigationLinksApiFp(this.configuration).navlinksControllerV1Remove(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {UpdateNavlinkDto} body 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NavigationLinksApi
     */
    public navlinksControllerV1Update(body: UpdateNavlinkDto, id: string, options?: any) {
        return NavigationLinksApiFp(this.configuration).navlinksControllerV1Update(body, id, options)(this.fetch, this.basePath);
    }

}
/**
 * NotificationsApi - fetch parameter creator
 * @export
 */
export const NotificationsApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateNotificationDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationControllerCreate(body: CreateNotificationDto, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling notificationControllerCreate.');
            }
            const localVarPath = `/api/v1/notification`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"CreateNotificationDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationControllerFindAll(options: any = {}): FetchArgs {
            const localVarPath = `/api/v1/notification`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationControllerFindOne(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling notificationControllerFindOne.');
            }
            const localVarPath = `/api/v1/notification/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationControllerRemove(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling notificationControllerRemove.');
            }
            const localVarPath = `/api/v1/notification/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateNotificationDto} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationControllerUpdate(body: UpdateNotificationDto, id: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling notificationControllerUpdate.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling notificationControllerUpdate.');
            }
            const localVarPath = `/api/v1/notification/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PATCH' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UpdateNotificationDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NotificationsApi - functional programming interface
 * @export
 */
export const NotificationsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateNotificationDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationControllerCreate(body: CreateNotificationDto, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
            const localVarFetchArgs = NotificationsApiFetchParamCreator(configuration).notificationControllerCreate(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationControllerFindAll(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Notification>> {
            const localVarFetchArgs = NotificationsApiFetchParamCreator(configuration).notificationControllerFindAll(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationControllerFindOne(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {
            const localVarFetchArgs = NotificationsApiFetchParamCreator(configuration).notificationControllerFindOne(id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationControllerRemove(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {
            const localVarFetchArgs = NotificationsApiFetchParamCreator(configuration).notificationControllerRemove(id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {UpdateNotificationDto} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationControllerUpdate(body: UpdateNotificationDto, id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {
            const localVarFetchArgs = NotificationsApiFetchParamCreator(configuration).notificationControllerUpdate(body, id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * NotificationsApi - factory interface
 * @export
 */
export const NotificationsApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {CreateNotificationDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationControllerCreate(body: CreateNotificationDto, options?: any) {
            return NotificationsApiFp(configuration).notificationControllerCreate(body, options)(fetch, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationControllerFindAll(options?: any) {
            return NotificationsApiFp(configuration).notificationControllerFindAll(options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationControllerFindOne(id: string, options?: any) {
            return NotificationsApiFp(configuration).notificationControllerFindOne(id, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationControllerRemove(id: string, options?: any) {
            return NotificationsApiFp(configuration).notificationControllerRemove(id, options)(fetch, basePath);
        },
        /**
         * 
         * @param {UpdateNotificationDto} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationControllerUpdate(body: UpdateNotificationDto, id: string, options?: any) {
            return NotificationsApiFp(configuration).notificationControllerUpdate(body, id, options)(fetch, basePath);
        },
    };
};

/**
 * NotificationsApi - object-oriented interface
 * @export
 * @class NotificationsApi
 * @extends {BaseAPI}
 */
export class NotificationsApi extends BaseAPI {
    /**
     * 
     * @param {CreateNotificationDto} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApi
     */
    public notificationControllerCreate(body: CreateNotificationDto, options?: any) {
        return NotificationsApiFp(this.configuration).notificationControllerCreate(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApi
     */
    public notificationControllerFindAll(options?: any) {
        return NotificationsApiFp(this.configuration).notificationControllerFindAll(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApi
     */
    public notificationControllerFindOne(id: string, options?: any) {
        return NotificationsApiFp(this.configuration).notificationControllerFindOne(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApi
     */
    public notificationControllerRemove(id: string, options?: any) {
        return NotificationsApiFp(this.configuration).notificationControllerRemove(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {UpdateNotificationDto} body 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApi
     */
    public notificationControllerUpdate(body: UpdateNotificationDto, id: string, options?: any) {
        return NotificationsApiFp(this.configuration).notificationControllerUpdate(body, id, options)(this.fetch, this.basePath);
    }

}
/**
 * UsersApi - fetch parameter creator
 * @export
 */
export const UsersApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {UpdateUserDto} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerUpdate(body: UpdateUserDto, id: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling userControllerUpdate.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling userControllerUpdate.');
            }
            const localVarPath = `/api/user/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PATCH' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UpdateUserDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {UpdateUserDto} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerUpdate(body: UpdateUserDto, id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {
            const localVarFetchArgs = UsersApiFetchParamCreator(configuration).userControllerUpdate(body, id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {UpdateUserDto} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerUpdate(body: UpdateUserDto, id: string, options?: any) {
            return UsersApiFp(configuration).userControllerUpdate(body, id, options)(fetch, basePath);
        },
    };
};

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * 
     * @param {UpdateUserDto} body 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public userControllerUpdate(body: UpdateUserDto, id: string, options?: any) {
        return UsersApiFp(this.configuration).userControllerUpdate(body, id, options)(this.fetch, this.basePath);
    }

}
