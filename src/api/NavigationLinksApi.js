/**
 * Codealpine
 * The codealpine API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateNavlinkDto from '../model/CreateNavlinkDto';
import UpdateNavlinkDto from '../model/UpdateNavlinkDto';

/**
* NavigationLinks service.
* @module api/NavigationLinksApi
* @version 1.0
*/
export default class NavigationLinksApi {

    /**
    * Constructs a new NavigationLinksApi. 
    * @alias module:api/NavigationLinksApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the navlinksControllerV1Create operation.
     * @callback module:api/NavigationLinksApi~navlinksControllerV1CreateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/CreateNavlinkDto} createNavlinkDto 
     * @param {module:api/NavigationLinksApi~navlinksControllerV1CreateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    navlinksControllerV1Create(createNavlinkDto, callback) {
      let postBody = createNavlinkDto;
      // verify the required parameter 'createNavlinkDto' is set
      if (createNavlinkDto === undefined || createNavlinkDto === null) {
        throw new Error("Missing the required parameter 'createNavlinkDto' when calling navlinksControllerV1Create");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/navlinks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the navlinksControllerV1FindAll operation.
     * @callback module:api/NavigationLinksApi~navlinksControllerV1FindAllCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/NavigationLinksApi~navlinksControllerV1FindAllCallback} callback The callback function, accepting three arguments: error, data, response
     */
    navlinksControllerV1FindAll(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/navlinks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the navlinksControllerV1FindOne operation.
     * @callback module:api/NavigationLinksApi~navlinksControllerV1FindOneCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:api/NavigationLinksApi~navlinksControllerV1FindOneCallback} callback The callback function, accepting three arguments: error, data, response
     */
    navlinksControllerV1FindOne(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling navlinksControllerV1FindOne");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/navlinks/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the navlinksControllerV1Remove operation.
     * @callback module:api/NavigationLinksApi~navlinksControllerV1RemoveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:api/NavigationLinksApi~navlinksControllerV1RemoveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    navlinksControllerV1Remove(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling navlinksControllerV1Remove");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/navlinks/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the navlinksControllerV1Update operation.
     * @callback module:api/NavigationLinksApi~navlinksControllerV1UpdateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:model/UpdateNavlinkDto} updateNavlinkDto 
     * @param {module:api/NavigationLinksApi~navlinksControllerV1UpdateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    navlinksControllerV1Update(id, updateNavlinkDto, callback) {
      let postBody = updateNavlinkDto;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling navlinksControllerV1Update");
      }
      // verify the required parameter 'updateNavlinkDto' is set
      if (updateNavlinkDto === undefined || updateNavlinkDto === null) {
        throw new Error("Missing the required parameter 'updateNavlinkDto' when calling navlinksControllerV1Update");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/navlinks/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
