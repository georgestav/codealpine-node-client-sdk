/*
 * Codealpine
 * The codealpine API description
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.42
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {ClimbingQuestionnaire} from '../model/ClimbingQuestionnaire';

/**
* ClimbingQuestionnaire service.
* @module api/ClimbingQuestionnaireApi
* @version 1.0
*/
export class ClimbingQuestionnaireApi {

    /**
    * Constructs a new ClimbingQuestionnaireApi. 
    * @alias module:api/ClimbingQuestionnaireApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the climbingQuestionnaireControllerFindAll operation.
     * @callback moduleapi/ClimbingQuestionnaireApi~climbingQuestionnaireControllerFindAllCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ClimbingQuestionnaire>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} withQuestions 
     * @param {module:api/ClimbingQuestionnaireApi~climbingQuestionnaireControllerFindAllCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    climbingQuestionnaireControllerFindAll(withQuestions, callback) {
      
      let postBody = null;
      // verify the required parameter 'withQuestions' is set
      if (withQuestions === undefined || withQuestions === null) {
        throw new Error("Missing the required parameter 'withQuestions' when calling climbingQuestionnaireControllerFindAll");
      }

      let pathParams = {
        'withQuestions': withQuestions
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ClimbingQuestionnaire];

      return this.apiClient.callApi(
        '/api/v1/climbing-questionnaire/all/{withQuestions}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the climbingQuestionnaireControllerFindForUser operation.
     * @callback moduleapi/ClimbingQuestionnaireApi~climbingQuestionnaireControllerFindForUserCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ClimbingQuestionnaire>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} authorization 
     * @param {module:api/ClimbingQuestionnaireApi~climbingQuestionnaireControllerFindForUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    climbingQuestionnaireControllerFindForUser(authorization, callback) {
      
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling climbingQuestionnaireControllerFindForUser");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ClimbingQuestionnaire];

      return this.apiClient.callApi(
        '/api/v1/climbing-questionnaire/user', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the climbingQuestionnaireControllerFindOne operation.
     * @callback moduleapi/ClimbingQuestionnaireApi~climbingQuestionnaireControllerFindOneCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClimbingQuestionnaire{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} withQuestions 
     * @param {module:api/ClimbingQuestionnaireApi~climbingQuestionnaireControllerFindOneCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    climbingQuestionnaireControllerFindOne(id, withQuestions, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling climbingQuestionnaireControllerFindOne");
      }
      // verify the required parameter 'withQuestions' is set
      if (withQuestions === undefined || withQuestions === null) {
        throw new Error("Missing the required parameter 'withQuestions' when calling climbingQuestionnaireControllerFindOne");
      }

      let pathParams = {
        'id': id,'withQuestions': withQuestions
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ClimbingQuestionnaire;

      return this.apiClient.callApi(
        '/api/v1/climbing-questionnaire/{id}/{withQuestions}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the climbingQuestionnaireControllerGetAnalysisMessage operation.
     * @callback moduleapi/ClimbingQuestionnaireApi~climbingQuestionnaireControllerGetAnalysisMessageCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} questionnaire 
     * @param {module:api/ClimbingQuestionnaireApi~climbingQuestionnaireControllerGetAnalysisMessageCallback} callback The callback function, accepting three arguments: error, data, response
     */
    climbingQuestionnaireControllerGetAnalysisMessage(questionnaire, callback) {
      
      let postBody = null;
      // verify the required parameter 'questionnaire' is set
      if (questionnaire === undefined || questionnaire === null) {
        throw new Error("Missing the required parameter 'questionnaire' when calling climbingQuestionnaireControllerGetAnalysisMessage");
      }

      let pathParams = {
        'questionnaire': questionnaire
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/v1/climbing-questionnaire/analysis/{questionnaire}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the climbingQuestionnaireControllerSaveUserQuestionnaire operation.
     * @callback moduleapi/ClimbingQuestionnaireApi~climbingQuestionnaireControllerSaveUserQuestionnaireCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} authorization 
     * @param {module:api/ClimbingQuestionnaireApi~climbingQuestionnaireControllerSaveUserQuestionnaireCallback} callback The callback function, accepting three arguments: error, data, response
     */
    climbingQuestionnaireControllerSaveUserQuestionnaire(authorization, callback) {
      
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling climbingQuestionnaireControllerSaveUserQuestionnaire");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/v1/climbing-questionnaire/save-answers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}