/*
 * Codealpine
 * The codealpine API description
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.42
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Codealpine);
  }
}(this, function(expect, Codealpine) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Codealpine.NotificationsApi();
  });

  describe('(package)', function() {
    describe('NotificationsApi', function() {
      describe('notificationControllerCreate', function() {
        it('should call notificationControllerCreate successfully', function(done) {
          // TODO: uncomment, update parameter values for notificationControllerCreate call and complete the assertions
          /*

          instance.notificationControllerCreate(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('notificationControllerFindAll', function() {
        it('should call notificationControllerFindAll successfully', function(done) {
          // TODO: uncomment notificationControllerFindAll call and complete the assertions
          /*

          instance.notificationControllerFindAll(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(Codealpine.Notification);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('notificationControllerFindOne', function() {
        it('should call notificationControllerFindOne successfully', function(done) {
          // TODO: uncomment, update parameter values for notificationControllerFindOne call and complete the assertions
          /*

          instance.notificationControllerFindOne(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(&#x27;string&#x27;);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('notificationControllerRemove', function() {
        it('should call notificationControllerRemove successfully', function(done) {
          // TODO: uncomment, update parameter values for notificationControllerRemove call and complete the assertions
          /*

          instance.notificationControllerRemove(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(&#x27;string&#x27;);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('notificationControllerUpdate', function() {
        it('should call notificationControllerUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for notificationControllerUpdate call and complete the assertions
          /*

          instance.notificationControllerUpdate(body, id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(&#x27;string&#x27;);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
